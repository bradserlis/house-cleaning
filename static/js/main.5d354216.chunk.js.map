{"version":3,"sources":["logo.jpg","logo-vertical.jpg","components/Headline.js","components/Services.js","components/Contact.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Headline","className","src","logo","alt","logoVertical","Services","role","aria-label","Contact","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,+LCgB5BC,EAVE,WACf,OACE,yBAAKC,UAAU,YACb,wBAAIA,UAAU,WAAd,yBACA,yBAAKA,UAAU,iBAAiBC,IAAKC,IAAMC,IAAI,0BAC/C,yBAAKH,UAAU,eAAeC,IAAKG,IAAcD,IAAI,4BCY5CE,EArBE,WACf,OACE,yBAAKL,UAAU,sBACb,wCACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,kBACb,4BACE,gCAAK,0BAAMA,UAAU,QAAQM,KAAK,MAAMC,aAAW,WAA9C,gBAAL,4BACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,SAA9C,gBAAL,yCACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,SAA9C,gBAAL,2BACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,OAA9C,gBAAL,sBACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,WAA9C,UAAL,gDACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,iBAA9C,gBAAL,WACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,sBAA9C,gBAAL,aACA,gCAAK,0BAAMP,UAAU,QAAQM,KAAK,MAAMC,aAAW,kBAA9C,gBAAL,gBCAKC,EAdC,WACd,OACE,yBAAKR,UAAU,qBACb,gEACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,iBACX,2DACA,qFACA,sDCAKS,EARA,WACb,OACE,yBAAKT,UAAU,oBACf,oDAAyB,0BAAMA,UAAU,cAAhB,gCCadU,EAXH,WACV,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d354216.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d1dd934c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.a2b98cfe.jpg\";","import React from 'react';\n\nimport '../App.css';\nimport logo from '../logo.jpg';\nimport logoVertical from '../logo-vertical.jpg';\n\nconst Headline = () => {\n  return (\n    <div className=\"headline\">\n      <h1 className=\"sr-only\">Kailua House Cleaning</h1>\n      <img className=\"landscape-logo\" src={logo} alt=\"Kailua House Cleaning\" />\n      <img className=\"default-logo\" src={logoVertical} alt=\"Kailua House Cleaning\" /> \n    </div>\n  )\n}\n\nexport default Headline;\n\n","import React from 'react';\n\nconst Services = () => {\n  return(\n    <div className=\"services-container\">\n      <h2>Services</h2>\n      <div className=\"divider\"></div>\n      <div className=\"services-block\">\n        <ul>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"diamond\">💎</span>30+ Years of Experience </li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"broom\">🧹</span> All Supplies and Equipment Provided </li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"house\">🏠</span> General House Cleaning</li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"box\">📦</span> Move Out Cleaning</li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"sparkle\">✨</span> Windows and Screens Cleaning (Single Story)</li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"calendar-week\">📅</span> Weekly</li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"calendar-week-flip\">📆</span> BiWeekly</li>\n          <li> <span className=\"emoji\" role=\"img\" aria-label=\"calendar-month\">🗓</span> Monthly</li>\n        </ul>        \n      </div>\n    </div>\n  )\n}\n\nexport default Services;\n","import React from 'react';\n\nconst Contact = () => {\n  return(\n    <div className=\"contact-container\">\n      <h2>Serving Windward Side O‘ahu</h2>\n      <div className=\"divider\"></div>\n      <div className=\"contact-block\">\n          <p>Kailua and surrounding areas</p>  \n          <p>Free Estimates! Ask for Daniel Patterson (808)384-4711</p>\n          <p>References Available</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Contact;\n","import React from 'react';\n\nconst Footer = () => {\n  return(\n    <div className=\"footer-container\">\n    <p>Questions? Email us @ <span className=\"email-span\">cowboysrule.dp@gmail.com </span></p>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\n\nimport Headline from './components/Headline';\nimport Services from './components/Services';\nimport Contact from './components/Contact';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Headline />\n      <Services />\n      <Contact />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}